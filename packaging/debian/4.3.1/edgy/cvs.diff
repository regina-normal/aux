--- python/regina-python.in	10 Oct 2003 02:37:15 -0000	1.8
+++ python/regina-python.in	14 Nov 2003 07:56:31 -0000
@@ -163,7 +163,7 @@ if (! $regina_home) {
 
 if (! $python_cmd) {
     my $which_python;
-    chomp($which_python = `which python`);
+    chomp($which_python = `which python2.4`);
     if (! $which_python) {
         &err("E: A Python interpreter could not be found.\n");
         &err("E: Set \$REGINA_PYTHON to a Python interpreter (such as /usr/bin/python)\n");
--- admin/kde.m4.ext	2005-06-28 13:30:28.000000000 +1000
+++ admin/kde.m4.ext	2006-01-06 15:08:54.000000000 +1100
@@ -1665,15 +1665,6 @@
        KDE_USE_CLOSURE_TRUE="#"
        KDE_USE_CLOSURE_FALSE=""
        KDE_NO_UNDEFINED=""
-       case $host in 
-         *-*-linux-gnu)
-           KDE_CHECK_COMPILER_FLAG([Wl,--no-undefined],
-                [KDE_CHECK_COMPILER_FLAG([Wl,--allow-shlib-undefined],
-		[KDE_NO_UNDEFINED="-Wl,--no-undefined -Wl,--allow-shlib-undefined"],
-		[KDE_NO_UNDEFINED=""])],
-	    [KDE_NO_UNDEFINED=""])
-           ;;
-       esac
   fi
   AC_SUBST(KDE_USE_CLOSURE_TRUE)
   AC_SUBST(KDE_USE_CLOSURE_FALSE)
--- regina-normal-4.3.1.orig/utils/trisetcmp.cpp
+++ regina-normal-4.3.1/utils/trisetcmp.cpp
@@ -59,7 +59,12 @@
 void runMatches(NPacket* tree1, NPacket* tree2) {
     NPacket *p1, *p2;
 
-    std::cout << "Matching (isomorphic) triangulations:\n" << std::endl;
+    if (subcomplexTesting)
+        std::cout << "Matching (isomorphic subcomplex) triangulations:\n"
+            << std::endl;
+    else
+        std::cout << "Matching (isomorphic) triangulations:\n" << std::endl;
+
     long nMatches = 0;
 
     for (p1 = tree1; p1; p1 = p1->nextTreePacket())
@@ -69,7 +74,8 @@
                     if (compare(static_cast<NTriangulation*>(p1),
                             static_cast<NTriangulation*>(p2))) {
                         std::cout << "    " << p1->getPacketLabel()
-                            << "  ==  " << p2->getPacketLabel() << std::endl;
+                            << (subcomplexTesting ? "  <=  " : "  ==  ")
+                            << p2->getPacketLabel() << std::endl;
                         nMatches++;
                     }
 
