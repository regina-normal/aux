--- regina-normal-4.96.orig/docs/man/CMakeLists.txt
+++ regina-normal-4.96/docs/man/CMakeLists.txt
@@ -2,6 +2,7 @@
 SET(man1dir ${MANDIR}/man1)
 
 SET(man1_files
+  censuslookup.1
   regconcat.1
   regconvert.1
   regfiledump.1
--- regina-normal-4.96.orig/engine/enumerate/normaliz/HilbertSeries.cpp
+++ regina-normal-4.96/engine/enumerate/normaliz/HilbertSeries.cpp
@@ -349,7 +349,7 @@
     //divide by gcd //TODO operate directly on vector
     Matrix<mpz_class> QP(quasi_poly);
     mpz_class g = QP.matrix_gcd();
-    g = gcd(g,quasi_denom);
+    g = libnormaliz::gcd(g,quasi_denom);
     quasi_denom /= g;
     QP.scalar_division(g);
     quasi_poly = QP.get_elements();
--- regina-normal-4.96.orig/engine/enumerate/normaliz/sublattice_representation.cpp
+++ regina-normal-4.96/engine/enumerate/normaliz/sublattice_representation.cpp
@@ -153,7 +153,7 @@
     
     //check if a factor can be extraced from B  //TODO necessary?
     Integer g = B.matrix_gcd();
-    g = gcd(g,c);  //TODO necessary??
+    g = libnormaliz::gcd(g,c);  //TODO necessary??
     if (g > 1) {
         c /= g;
         B.scalar_division(g);
--- regina-normal-4.96.orig/engine/enumerate/normaliz/vector_operations.cpp
+++ regina-normal-4.96/engine/enumerate/normaliz/vector_operations.cpp
@@ -167,7 +167,7 @@
     size_t i, size=v.size();
     Integer g=0;
     for (i = 0; i < size; i++) {
-        g=gcd(g,v[i]);
+        g=libnormaliz::gcd(g,v[i]);
         if (g==1) {
             return 1;
         }
@@ -182,7 +182,7 @@
     size_t i,size=v.size();
     Integer g=1;
     for (i = 0; i < size; i++) {
-        g=lcm(g,v[i]);
+        g=libnormaliz::lcm(g,v[i]);
         if (g==0) {
             return 0;
         }
--- regina-normal-4.96.orig/engine/snappea/kernel/tables.c
+++ regina-normal-4.96/engine/snappea/kernel/tables.c
@@ -210,7 +210,7 @@
  *  index_by_permutation[] is the inverse of permutation_by_index[].
  *  That is, for 0 <= i < 24,  index_by_permutation[permutation_by_index[i]] = i.
  */
-const char index_by_permutation[256] = {
+const signed char index_by_permutation[256] = {
     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
     -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 22, -1,
     -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 21, -1, -1,
--- regina-normal-4.96.orig/engine/snappea/kernel/tables.h
+++ regina-normal-4.96/engine/snappea/kernel/tables.h
@@ -27,7 +27,7 @@
 extern const signed char    parity[256];
 extern const FaceIndex      vt_side[4][3];
 extern const Permutation    permutation_by_index[24];
-extern const char           index_by_permutation[256];
+extern const signed char    index_by_permutation[256];
 
 #include "end_namespace.h"
 
--- regina-normal-4.96.orig/python/dim2/dim2triangulation.cpp
+++ regina-normal-4.96/python/dim2/dim2triangulation.cpp
@@ -109,7 +109,7 @@
     boost::python::tuple isoSig_relabelling(const Dim2Triangulation& t) {
         regina::Dim2Isomorphism* iso;
         std::string sig = t.isoSig(&iso);
-        return make_tuple(
+        return boost::python::make_tuple(
             sig,
             boost::python::object(boost::python::handle<>(
                 boost::python::manage_new_object::
--- regina-normal-4.96.orig/python/subcomplex/nblockedsfs.cpp
+++ regina-normal-4.96/python/subcomplex/nblockedsfs.cpp
@@ -44,7 +44,7 @@
     boost::python::tuple isPluggedIBundle_tuple(const NBlockedSFS& b) {
         std::string name;
         bool ans = b.isPluggedIBundle(name);
-        return make_tuple(ans, name);
+        return boost::python::make_tuple(ans, name);
     }
 }
 
--- regina-normal-4.96.orig/python/triangulation/ntriangulation.cpp
+++ regina-normal-4.96/python/triangulation/ntriangulation.cpp
@@ -182,7 +182,7 @@
     boost::python::tuple isoSig_relabelling(const NTriangulation& t) {
         regina::NIsomorphism* iso;
         std::string sig = t.isoSig(&iso);
-        return make_tuple(
+        return boost::python::make_tuple(
             sig,
             boost::python::object(boost::python::handle<>(
                 boost::python::manage_new_object::
