#!/usr/bin/env bash
set -e

# Any releases before this will be pulled from archives.fedoraproject.org.
min_current_fedora=37

ver="$1"
case "$ver" in
  [0-9][0-9]) ;;
  *) echo "Invalid Fedora version: $ver"; exit 1;;
esac

if [ -n "$2" ]; then
  echo "The fedora script does not support custom architectures."; exit 1
fi

tag=bab/fedora:$ver
distribution=fedora-$ver

# Support history for architectures in fedora:
# - x86_64:  supported for all versions
# - aarch64: only supported for >= 28
# - i386:    only supported for <= 25
#
# Note: modern kernels are incompatible with glibc < 2.14 (see debian #875981),
# which means we cannot hope to support any release earlier than fedora 16.
#
# The more immediate problem however is that fedora 22 was the first to offer
# dnf, and so any attempt to support fedora 21 or earlier could require a
# substantial rewrite of several scripts in this repository.

arch="`uname -m`"
case "$arch" in
  x86_64) ;;
  aarch64) ;;
  *) echo "Unknown architecture: $arch"; exit 1;;
esac

if [ "$ver" -le 27 -a "$arch" = aarch64 ]; then
  echo "ERROR: aarch64 is only available for Fedora 28 and above."
  exit 1
fi

echo "Preparing Fedora $ver ($arch) as $tag ..."
echo

dir="$(mktemp -d ${TMPDIR:-/var/tmp}/docker-mkimage.XXXXXXXXXX)"
rootfsDir="$dir/rootfs"
tarFile="$dir/rootfs.tar.xz"

if [ "$ver" -ge "$min_current_fedora" ]; then
  mirror="http://mirror.aarnet.edu.au/pub/fedora/linux/releases/$ver/Everything/$arch/os/Packages/"
else
  mirror="http://archives.fedoraproject.org/pub/archive/fedora/linux/releases/$ver/Everything/$arch/os/Packages/"
fi

echo '----- Bootstrapping distribution -----'

if [ "$ver" -ge 28 ]; then
  postinst=../rinse/postinst/fedora-28
else
  postinst=../rinse/postinst/fedora-22
fi

mkdir -p "$rootfsDir"
../rinse/rinse \
  --directory "$rootfsDir" --arch "$arch" --distribution "$distribution" \
  --pkgs-dir ../rinse/packages --keyfile "../rinse/keys/$distribution" \
  --before-post-install ../rinse/postinst/common/run_all \
  --post-install "$postinst" \
  --mirror "$mirror"

if [ -d "$rootfsDir/etc/sysconfig" ]; then
	# allow networking init scripts inside the container to work without extra steps
	echo 'NETWORKING=yes' > "$rootfsDir/etc/sysconfig/network"
fi

echo '----- Creating /etc/resolv.conf -----'

# make sure /etc/resolv.conf has something useful in it
mkdir -p "$rootfsDir/etc"
rm -f "$rootfsDir/etc/resolv.conf"
cat > "$rootfsDir/etc/resolv.conf" <<'EOF'
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF

if [ "$ver" = 26 ]; then
  # On Fedora 26, dnf fails at this point because it cannot find the SSL
  # certificates.  Setting SSL_CERT_DIR=/etc/ssl/certs fixes this but it's not
  # clear to me where I can put this so that chroot will honour it.
  # For now we just disable dnf's ssl verification (recall that we still
  # have gpg verification, which should be enough to ensure integrity).
  echo 'sslverify=0' >> "$rootfsDir/etc/dnf/dnf.conf"
fi

echo '----- Updating distribution -----'

# We do not yet have dnf config-manager available.
sed -i -e 's/^enabled=1/enabled=0/' \
  "$rootfsDir"/etc/yum.repos.d/*update*.repo \
  "$rootfsDir"/etc/yum.repos.d/*cisco*.repo

chroot "$rootfsDir" dnf upgrade -y -b --refresh --setopt=install_weak_deps=False

chroot "$rootfsDir" dnf install -y -b --setopt=install_weak_deps=False \
  dnf-plugins-core
chroot "$rootfsDir" dnf config-manager --set-enabled fedora-source

# On Fedora 37, curl is broken which means rinse fails to install some helper
# packages.  The curl error seems to be this one:
# https://github.com/aarond10/https_dns_proxy/issues/136
# By this point in the installation, however, things should be working and so
# we can just install those missing packages now.
chroot "$rootfsDir" dnf install -y -b --setopt=install_weak_deps=False \
  vim-minimal dhclient

chroot "$rootfsDir" dnf clean --quiet all

echo
echo 'Enabled repositories:'
chroot "$rootfsDir" dnf repolist
echo

echo '----- Removing /dev and /proc -----'

# Docker mounts tmpfs at /dev and procfs at /proc so we can remove them
rm -rf "$rootfsDir/dev" "$rootfsDir/proc"
mkdir -p "$rootfsDir/dev" "$rootfsDir/proc"

if [ "$ver" -ge 36 ]; then
  chroot "$rootfsDir" dnf install -y -b --setopt=install_weak_deps=False \
    authselect pam
  echo '----- Initialising authselect -----'
  chroot "$rootfsDir" authselect select minimal --force
fi

echo '----- Creating Dockerfile -----'

cat > "$dir/Dockerfile" <<EOF
FROM scratch
ADD $(basename "$tarFile") /
CMD ["/bin/bash"]
RUN echo '%vendor Regina' >> /etc/rpm/macros
EOF

echo '----- Bundling filesystem -----'

tar -c -f "$tarFile" --numeric-owner --auto-compress -C "$rootfsDir" --transform='s,^./,,' .
rm -rf "$rootfsDir"

echo '----- Building docker image -----'

docker build -t "$tag" "$dir"
rm -rf "$dir"

echo '----- Done -----'

exit 0
