#!/usr/bin/env bash
set -e

ver="$1"
if [ ! -e "/usr/share/debootstrap/scripts/$ver" ]; then
  echo "Unsupported Ubuntu version: $ver"; exit 1
fi

# Support history for architectures in ubuntu:
# - amd64: supported for all versions
# - arm64: only supported for >= 13.10 (saucy)
# - i386:  only full supported as a desktop for <= 17.04 (zesty) and in
#          any form for <= 19.04 (disco)

myarch="`uname -m`"

arch="$2"
if [ -n "$arch" ]; then
  case "$arch" in
    i386) ;;
    amd64) echo "Cannot explicitly request architecture: $arch"; exit 1;;
    arm64) echo "Cannot explicitly request architecture: $arch"; exit 1;;
    *) echo "Unsupported Ubuntu architecture: $arch"; exit 1;;
  esac
fi

if [ -n "$arch" ]; then
  tag="bare/ubuntu:${ver}_${arch}"
else
  tag="bare/ubuntu:$ver"
  arch=`dpkg --print-architecture`
fi

# Some ubuntu versions live on the old-releases mirror and/or use old
# signing keys, but debootstrap is not always aware of this.
#
# Note: modern amd64 kernels are incompatible with glibc < 2.14 (see
# debian #875981), which means that any ubuntu earlier than precise needs to be
# i386 only.
#
# Warning: very old ubuntus (<= oneiric) appear to build successfully,
# but there are a lot of noisy warnings about logging failures due to /dev/pts
# not being mounted.  Moreover, for gutsy, the compressed package listings
# (Packages.gz / Packages.bz2) appear to be corrupt, but the uncompressed
# listings seem fine.  These issues might come back to bite us.
#
# Regarding unsupported releases: karmic and earlier fail at the point of
# apt-get update (they cannot connect to old-releases.ubuntu.com).
#
archive=0
oldkey=0
case "$ver" in
  # These are the ancient ubuntu releases that we do not yet support.
  # We keep them here anyway, going back to the very beginning of ubuntu,
  # in case we ever want to try:
  warty ) oldkey=1 ;;               #  4.10
  hoary ) oldkey=1 ;;               #  5.04
  breezy ) oldkey=1 ;;              #  5.10
  dapper ) oldkey=1 ; archive=1 ;;  #  6.06 LTS
  edgy ) oldkey=1 ;;                #  6.10
  feisty ) oldkey=1 ;;              #  7.04
  gutsy ) oldkey=1 ;;               #  7.10
  intrepid ) oldkey=1 ;;            #  8.10
  jaunty ) oldkey=1 ;;              #  9.04
  karmic ) oldkey=1 ;;              #  9.10
  # These are the ancient releases that we do support and which need special
  # arguments for debootstrap:
  hardy ) oldkey=1 ;;               #  8.04 LTS
  lucid ) oldkey=1 ;;               # 10.04 LTS
  maverick ) oldkey=1 ;;            # 10.10
  natty ) oldkey=1 ;;               # 11.04
  oneiric ) oldkey=1 ;;             # 11.10
  precise ) oldkey=1 ;;             # 12.04 LTS
  quantal ) archive=1 ;;            # 12.10
  raring ) archive=1 ;;             # 13.04
  saucy ) archive=1 ;;              # 13.10
  utopic ) archive=1 ;;             # 14.10
  vivid ) archive=1 ;;              # 15.04
  wily ) archive=1 ;;               # 15.10
  yakkety ) archive=1 ;;            # 16.10
  zesty ) archive=1 ;;              # 17.04
  artful ) archive=1 ;;             # 17.10
  cosmic ) archive=1 ;;             # 18.10
  disco ) archive=1 ;;              # 19.04
  eoan ) archive=1 ;;               # 19.10
  groovy ) archive=1 ;;             # 20.10
  hirsute ) archive=1 ;;            # 21.04
  impish ) archive=1 ;;             # 21.10
  kinetic ) archive=1 ;;            # 22.10
  # For non-ancient LTS releases (>= trusty) and the newest interim releases,
  # debootstrap gets everything right by default.
  * ) ;;
esac

debootstrap_opts="--arch=$arch"
debootstrap_args="$ver"

if [ "$archive" = 1 ]; then
  debootstrap_args="$debootstrap_args http://old-releases.ubuntu.com/ubuntu"
fi
if [ "$oldkey" = 1 ]; then
  debootstrap_opts="$debootstrap_opts --keyring=/usr/share/keyrings/ubuntu-archive-removed-keys.gpg"
fi

echo "Preparing Ubuntu $ver ($arch) as $tag ..."
echo
./mkimage.sh -t "$tag" debootstrap $debootstrap_opts $debootstrap_args

exit 0
