#!/usr/bin/env bash
set -e

# Any releases before this will be pulled from archives.fedoraproject.org.
min_current_fedora=37

ver="$1"
case "$ver" in
  [0-9][0-9]) ;;
  *) echo "Invalid Fedora version: $ver"; exit 1;;
esac

distribution=fedora-$ver

# Support history for architectures in fedora:
# - x86_64:  supported for all versions
# - aarch64: only supported for >= 28
# - i386:    only supported for <= 25
#
# Note: modern kernels are incompatible with glibc < 2.14 (see debian #875981),
# which means we cannot hope to support any release earlier than fedora 16.
#
# The more immediate problem however is that fedora 22 was the first to offer
# dnf, and so any attempt to support fedora 21 or earlier could require a
# substantial rewrite of several scripts in this repository.
#
if [ "$ver" -lt 22 ]; then
  echo "ERROR: Only fedora 22 and above is supported (for now)."
  exit 1
fi

# arch:     user-specific arch override; empty if the host arch should be used.
# usearch:  the fedora base arch to install; never empty.
# dnfarch:  used if we need to hack a different arch into dnf's configuration;
#           empty if dnf is expected to get this right on its own.
arch="$2"
dnfarch=
if [ -n "$arch" ]; then
  case "$arch" in
    i386|i586|i686)
      usearch=i386
      dnfarch=i686
      tag=bare/fedora:${ver}_${usearch}
      ;;
    amd64|arm64|x86_64|aarch64)
      echo "Cannot explicitly request architecture: $arch"
      exit 1
      ;;
    *)
      echo "Unsupported Fedora architecture: $arch"
      exit 1
      ;;
  esac
else
  usearch="`uname -m`"
  case "`uname -m`" in
    amd64|x86_64) usearch=x86_64 ;;
    arm64|aarch64) usearch=aarch64 ;;
    i386|i586|i686) usearch=i386 ;;
    *) echo "Unknown architecture: $usearch"; exit 1;;
  esac
  tag=bare/fedora:$ver
fi

if [ "$ver" -le 27 -a "$usearch" = aarch64 ]; then
  echo "ERROR: aarch64 is only available for Fedora 28 and above."
  exit 1
elif [ "$ver" -ge 26 -a "$usearch" = i386 ]; then
  echo "ERROR: i386 is only available for Fedora 25 and below."
  exit 1
fi

echo "Preparing Fedora $ver ($usearch) as $tag ..."
echo

dir="$(mktemp -d ${TMPDIR:-/var/tmp}/docker-mkimage.XXXXXXXXXX)"
rootfsDir="$dir/rootfs"
tarFile="$dir/rootfs.tar.xz"

if [ "$ver" -ge "$min_current_fedora" ]; then
  mirror="http://mirror.aarnet.edu.au/pub/fedora/linux/releases/$ver/Everything/$usearch/os/Packages/"
else
  mirror="http://archives.fedoraproject.org/pub/archive/fedora/linux/releases/$ver/Everything/$usearch/os/Packages/"
fi

echo '----- Bootstrapping distribution -----'

if [ "$ver" -ge 28 ]; then
  postinst=../rinse/postinst/fedora-28
else
  postinst=../rinse/postinst/fedora-22
fi

if [ -d /data/rinse/cache ]; then
  cachedir=/data/rinse/cache
else
  cachedir=/var/cache/rinse
fi

mkdir -p "$rootfsDir"
../rinse/rinse --cache-dir "$cachedir" \
  --directory "$rootfsDir" --arch "$usearch" --distribution "$distribution" \
  --pkgs-dir ../rinse/packages --keyfile "../rinse/keys/$distribution" \
  --before-post-install ../rinse/postinst/common/run_all \
  --post-install "$postinst" \
  --mirror "$mirror"

if [ -d "$rootfsDir/etc/sysconfig" ]; then
	# allow networking init scripts inside the container to work without extra steps
	echo 'NETWORKING=yes' > "$rootfsDir/etc/sysconfig/network"
fi

echo '----- Creating /etc/resolv.conf -----'

# make sure /etc/resolv.conf has something useful in it
mkdir -p "$rootfsDir/etc"
rm -f "$rootfsDir/etc/resolv.conf"
cat > "$rootfsDir/etc/resolv.conf" <<'EOF'
nameserver 8.8.8.8
nameserver 8.8.4.4
EOF

if [ "$ver" = 26 ]; then
  # On Fedora 26, dnf fails at this point because it cannot find the SSL
  # certificates.  Setting SSL_CERT_DIR=/etc/ssl/certs fixes this but it's not
  # clear to me where I can put this so that chroot will honour it.
  #
  # For now we just disable dnf's ssl verification (recall that we still
  # have gpg verification, which should be enough to ensure integrity).
  #
  # Note that the problem does seem to resolve itself by the time the docker
  # image is created, so in theory this line could be removed again before
  # bundling up the filesystem at the end of this script.
  echo '----- Unbreaking SSL certificates -----'
  echo 'sslverify=0' >> "$rootfsDir/etc/dnf/dnf.conf"
fi

if [ -n "$arch" ]; then
  # When (for example) using an i386 chroot on an x86_64 system,
  # DNF gets the basearch wrong and so it uses the wrong repositories.
  #
  # The fedora versions that support i386 also appear to be too old to support
  # basearch options for dnf, and so we need to hack this into the dnf source
  # code.  At least these are sufficiently ancient that there is no risk that
  # dnf will be updated and override the hack.. :/
  echo '----- Hard-coding DNF basearch -----'
  if [ "$ver" -le 25 ]; then
    sed -i -e "s/hawkey\\.detect_arch()/'$dnfarch'/" \
      "$rootfsDir"/usr/lib/*/site-packages/dnf/conf/substitutions.py
  else
    # This hack has only been tested on fedora 25 so far.
    echo "ERROR: DNF basearch hack appears necessary but is unsupported for"
    echo "       this fedora version."
    exit 1
  fi
fi

echo '----- Updating distribution -----'

# We do not yet have dnf config-manager available.
sed -i -e 's/^enabled=1/enabled=0/' "$rootfsDir"/etc/yum.repos.d/*update*.repo
if [ "$ver" -ge 24 ]; then
  # Fedora 23 and earlier do not have the cisco repositories.
  sed -i -e 's/^enabled=1/enabled=0/' "$rootfsDir"/etc/yum.repos.d/*cisco*.repo
fi

chroot "$rootfsDir" dnf upgrade -y -b --refresh --setopt=install_weak_deps=False

chroot "$rootfsDir" dnf install -y -b --setopt=install_weak_deps=False \
  dnf-plugins-core
chroot "$rootfsDir" dnf config-manager --set-enabled fedora-source

# On Fedora 37, curl is broken which means rinse fails to install some helper
# packages.  The curl error seems to be this one:
# https://github.com/aarond10/https_dns_proxy/issues/136
# By this point in the installation, however, things should be working and so
# we can just install those missing packages now.
chroot "$rootfsDir" dnf install -y -b --setopt=install_weak_deps=False \
  vim-minimal dhclient

chroot "$rootfsDir" dnf clean --quiet all

echo
echo 'Enabled repositories:'
chroot "$rootfsDir" dnf repolist
echo

echo '----- Removing /dev and /proc -----'

# Docker mounts tmpfs at /dev and procfs at /proc so we can remove them
rm -rf "$rootfsDir/dev" "$rootfsDir/proc"
mkdir -p "$rootfsDir/dev" "$rootfsDir/proc"

if [ "$ver" -ge 36 ]; then
  chroot "$rootfsDir" dnf install -y -b --setopt=install_weak_deps=False \
    authselect pam
  echo '----- Initialising authselect -----'
  chroot "$rootfsDir" authselect select minimal --force
fi

echo '----- Creating Dockerfile -----'

cat > "$dir/Dockerfile" <<EOF
FROM scratch
ADD $(basename "$tarFile") /
CMD ["/bin/bash"]
RUN echo '%vendor Regina' >> /etc/rpm/macros
EOF

echo '----- Bundling filesystem -----'

tar -c -f "$tarFile" --numeric-owner --auto-compress -C "$rootfsDir" --transform='s,^./,,' .
rm -rf "$rootfsDir"

echo '----- Building docker image -----'

docker build -t "$tag" "$dir"
rm -rf "$dir"

echo '----- Done -----'

exit 0
