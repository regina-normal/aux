#!/usr/bin/perl -w
use File::Copy;
use File::Path;
use strict;

-e 'build' or die "This script must be run from within its own directory";

my $imagetype=$ARGV[0];
my $release=$ARGV[1];
if (not ($release and $imagetype)) {
    print <<__END__;
Usage: ./build <imagetype> <release> [<arch>]

Examples:
    ./build basic 39
    ./build desktop bookworm i386
    ./build pkgdev jammy
__END__
    exit 1;
}

my @alldists = qw(debian ubuntu fedora opensuse arch);
my $dist;
foreach my $d (@alldists) {
    open(LIST, '<', "../supported/$d.list") or die;
    while (<LIST>) {
        chomp;
        if ($_ eq $release) {
            $dist = $d;
            last;
        }
    }
    close(LIST);
    defined $dist and last;
}
defined $dist or die "Not a release from a known distribution: $release";
print("Distribution: $dist\n");

my $arch=$ARGV[2];
my $relarch=$release;
if (defined $arch) {
    print("Architecture: $arch\n");
    $relarch .= "_$arch";
} else {
    print("Architecture: same as host\n");
}

my $context = "${imagetype}_${dist}_${relarch}";
-e $context and die "Stale directory needs to be removed: $context";
mkdir $context or die;

my $dockerfile = 'Dockerfile';
my $dockerdata;
if ($imagetype eq 'basic') {
    $dockerdata = basic();
} elsif ($imagetype eq 'desktop') {
    $dockerdata = desktop();
} elsif ($imagetype eq 'pkgdev') {
    $dockerdata = pkgdev();
} else {
    die "Unknown image type: $imagetype";
}
defined $dockerdata or die "This specific docker image is not yet supported";

print("\nWriting $dockerfile...\n");
open(DOCKERFILE, '>', $dockerfile) or die;
print DOCKERFILE $dockerdata;
close(DOCKERFILE);

my $tag = ($dist eq 'arch' ? "$imagetype/$dist" : "$imagetype/$dist:$relarch");
print("Building $tag...\n\n");

system('docker', 'build', '-t', $tag, '-f', $dockerfile, $context) and
    die "The call to 'docker build ...' failed";

unlink($dockerfile) or die "Could not remove $dockerfile";
rmtree($context) or die "Could not remove $context";

# --------------------------------------------------------------------------
# Basic user image
# --------------------------------------------------------------------------

sub basic {
    print("Basic user image for $dist $release\n");

    my $bare = ($dist eq 'arch' || $release eq 'sid' ? 'rolling' : 'bare');
    my $common = 'ca-certificates zsh wget';

    ($dist eq 'debian' or $dist eq 'ubuntu') and return <<__END__;
FROM $bare/$dist:$relarch
RUN apt-get update
RUN apt-get dist-upgrade -y
RUN apt-get install -y apt-transport-https $common gnupg vim
RUN apt-get clean
RUN useradd -U -s /bin/bash -m user
__END__

    $dist eq 'fedora' and return <<__END__;
FROM $bare/$dist:$relarch
RUN dnf upgrade -y -b --refresh
RUN dnf install -y -b $common gnupg2 which perl vim-enhanced
RUN dnf clean all
RUN useradd -U -s /bin/bash -m user
__END__

    $dist eq 'opensuse' and return <<__END__;
FROM $bare/$dist:$relarch
RUN zypper refresh
RUN zypper update -y
RUN zypper install -y $common gpg2 which perl vim
RUN zypper clean
RUN useradd -U -s /bin/bash -m user
__END__

    $dist eq 'arch' and return <<__END__;
FROM $bare/$dist
RUN pacman --noconfirm --noprogressbar -Syy
RUN pacman --noconfirm --noprogressbar -Syu
RUN pacman --noconfirm --noprogressbar -S $common gnupg which perl vim
RUN pacman --noconfirm --noprogressbar -Scc
RUN useradd -U -s /bin/bash -m user
__END__
}

# --------------------------------------------------------------------------
# Full desktop image
# --------------------------------------------------------------------------

sub desktop {
    print("Full desktop image for $dist $release\n");

    ($dist eq 'ubuntu') and return <<__END__;
FROM basic/$dist:$relarch
RUN apt-get install -y ubuntu-desktop
RUN apt-get clean
__END__
}

# --------------------------------------------------------------------------
# General package building
# --------------------------------------------------------------------------

sub pkgdev {
    print("Package development for $dist $release\n");

    my $extra = '';

    # For debian and LTS ubuntu releases, include all available gcc versions
    # and all available clang versions.
    if ($dist eq 'debian') {
        my @gcc = ();
        $release eq 'jessie' and @gcc = qw(4.8 4.9);
        $release eq 'stretch' and @gcc = qw(6);
        $release eq 'buster' and @gcc = qw(7 8);
        $release eq 'bullseye' and @gcc = qw(9 10);
        $release eq 'bookworm' and @gcc = qw(11 12);
        $extra .= "gcc-$_ g++-$_ " foreach @gcc;

        my @clang = ();
        $release eq 'jessie' and @clang = qw(3.4 3.5);
        $release eq 'stretch' and @clang = qw(3.8 3.9 4.0 7);
        $release eq 'buster' and @clang = qw(6.0 7 11 13);
        $release eq 'bullseye' and @clang = qw(9 11 13);
        $release eq 'bookworm' and @clang = qw(13 14 15);
        $extra .= "clang-$_ " foreach @clang;
    } elsif ($dist eq 'ubuntu') {
        # Most of the non-standard compiler versions here require universe.
        my @gcc = ();
        $release eq 'precise' and @gcc = qw(4.4 4.5 4.6);
        $release eq 'trusty' and @gcc = qw(4.4 4.6 4.7 4.8);
        $release eq 'xenial' and @gcc = qw(4.7 4.8 4.9 5);
        $release eq 'bionic' and @gcc = qw(4.8 5 6 7 8);
        $release eq 'focal' and @gcc = qw(7 8 9 10);
        $release eq 'jammy' and @gcc = qw(9 10 11 12);
        $extra .= "gcc-$_ g++-$_ " foreach @gcc;

        my @clang = ();
        $release eq 'precise' and @clang = qw(3.4);
        $release eq 'trusty' and @clang = qw(3.3 3.4 3.5 3.6 3.8 3.9);
        $release eq 'xenial' and @clang = qw(3.5 3.6 3.7 3.8 3.9 4.0 8);
        $release eq 'bionic' and @clang = qw(3.9 4.0 5.0 6.0 8 9 10);
        $release eq 'focal' and @clang = qw(6.0 7 8 9 10 12);
        $release eq 'jammy' and @clang = qw(11 12 13 14 15);
        $extra .= "clang-$_ " foreach @clang;
    }

    if ($dist eq 'debian' or $dist eq 'ubuntu') {
        copy('deb-src.pl', "$context/deb-src.pl") or die;
        my $data = <<__END__;
FROM basic/$dist:$relarch
ADD deb-src.pl /root/deb-src.pl
__END__
        # For ubuntu, we enable universe now so that we have access to
        # non-default compiler versions.
        $dist eq 'ubuntu' and $data .= <<__END__;
RUN sed -i -s 's/ main\$/ main universe/' /etc/apt/sources.list; \\
    cat /etc/apt/sources.list
__END__
        $data .= <<__END__;
RUN perl /root/deb-src.pl && rm /root/deb-src.pl
RUN apt-get update
RUN apt-get dist-upgrade -y
RUN apt-get install -y --no-install-recommends $extra\\
    build-essential devscripts fakeroot lintian autopkgtest debhelper git
RUN apt-get clean
RUN useradd -U -s /bin/bash -m build
__END__
        return $data;
    }

    if ($dist eq 'fedora') {
        # Fedora VMs already come with a source repository.
        my $data = <<__END__;
FROM basic/$dist:$relarch
RUN dnf upgrade -y -b --refresh --setopt=install_weak_deps=False
RUN dnf install -y -b --setopt=install_weak_deps=False \\
    dnf-utils rpm-build libappstream-glib-builder \\
    gcc gcc-c++ glibc-devel libstdc++-devel make git
RUN dnf clean all
RUN useradd -U -s /bin/bash -m build
RUN mkdir /home/build/rpmbuild
RUN mkdir /home/build/rpmbuild/{SOURCES,SPECS}
RUN chown -R build:build /home/build/rpmbuild
__END__
        if ($release eq '37') {
            # On Fedora 37, appstream-builder (via gdk-pixbuf) cannot recognise
            # any icon formats at all.  The following line seems to fix this.
            $data .= "RUN /usr/bin/update-mime-database /usr/share/mime\n";
        }
        return $data;
    }

    $dist eq 'opensuse' and return <<__END__;
FROM basic/$dist:$relarch
RUN zypper refresh
RUN zypper update -y
RUN zypper install -y --no-recommends \\
    rpm-build appstream-glib gcc gcc-c++ glibc-devel libstdc++-devel git
RUN zypper clean
RUN useradd -U -s /bin/bash -m build
RUN mkdir /home/build/rpmbuild
RUN mkdir /home/build/rpmbuild/{SOURCES,SPECS}
RUN chown -R build:build /home/build/rpmbuild
RUN zypper addrepo http://download.opensuse.org/source/distribution/leap/$release/repo/oss/ source
__END__

    $dist eq 'arch' and return <<__END__;
FROM basic/$dist
RUN pacman --noconfirm --noprogressbar -Syy
RUN pacman --noconfirm --noprogressbar -Syu
RUN pacman --noconfirm --noprogressbar -S git base-devel devtools gdb namcap
RUN pacman --noconfirm --noprogressbar -Scc
RUN useradd -U -s /bin/bash -m build
__END__
}

