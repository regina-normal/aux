#!/bin/sh
#
#  Customise the distribution post-install.
#

prefix=$1

if [ ! -d "${prefix}" ]; then
  echo "Serious error - the named directory doesn't exist."
  exit
fi


#
#  2.  Copy the cached .RPM files into the zypper directory, so that
#     zypper doesn't need to fetch them again.
#

mkdir -p ${prefix}/var/cache/zypp/packages/opensuse/suse/${ARCH}
mv ${prefix}/*.rpm ${prefix}/var/cache/zypp/packages/opensuse/suse/${ARCH}
cp -pu ${cache_dir}/${dist}.${ARCH}/* ${prefix}/var/cache/zypp/packages/opensuse/suse/${ARCH}

#
#  3.  Ensure that zypper has a working configuration file.
#
arch="$ARCH"
if [ "$arch" = "amd64" ] ; then
    arch=x86_64
elif [ "$arch" = "arm64" ] ; then
    arch=aarch64
fi

[ -d "${prefix}/etc/zypp/repos.d" ] || mkdir -p ${prefix}/etc/zypp/repos.d
cat > ${prefix}/etc/zypp/repos.d/${dist}.repo <<EOF
[opensuse]
name=${dist}
baseurl=$(dirname ${mirror})
enabled=1
gpgcheck=1

EOF

if [ $ARCH = "i386" ] ; then
    echo "  Setting architecture to i686"
    sed -i 's/\(# \)\?arch = .*/arch = i686/' ${prefix}/etc/zypp/zypp.conf
fi


#
#  4.  Run "zypper install zypper".
#

echo "  Bootstrapping zypper"

# We should have a symlink /etc/products.d/baseproduct at this point, but this
# gets created via the openSUSE-release postinst script, which is not run
# during the initial rinse extraction.  Make it now, since zypper complains
# otherwise.
#
if [ -d "${prefix}/etc/products.d" ]; then
  if [ ! -e "${prefix}/etc/products.d/baseproduct" ]; then
    if [ -e "${prefix}/etc/products.d/Leap.prod" ]; then
      echo "  .. adding openSUSE baseproduct symlink"
      ln -s Leap.prod "${prefix}/etc/products.d/baseproduct"
    fi
  fi
fi

# No /etc/passwd at this point
cat > ${prefix}/etc/passwd <<EOT
root:x:0:0:root:/root:/bin/bash
lp:x:4:7:Printing daemon:/var/spool/lpd:/bin/bash
mail:x:8:12:Mailer daemon:/var/spool/clientmqueue:/bin/false
news:x:9:13:News system:/etc/news:/bin/bash
uucp:x:10:14:Unix-to-Unix CoPy system:/etc/uucp:/bin/bash
man:x:13:62:Manual pages viewer:/var/cache/man:/bin/bash
nobody:x:65534:65533:nobody:/var/lib/nobody:/bin/bash
wwwrun:x:30:8:WWW daemon apache:/var/lib/wwwrun:/bin/false
EOT

cat > ${prefix}/etc/group <<EOT
root:x:0:
tty:x:5:
lp:x:7:
mail:x:12:
news:x:13:
uucp:x:14:
shadow:x:15:
dialout:x:16:
lock:x:54:
EOT

# Need key trusted to prevent warnings during package install.
# It appears that zypper simply has _no_ way whatsoever to import a user-given
# key as opposed to what happens here, which is that it imports whatever key it
# downloads from the remote server.  Yes it does show the fingerprint, but
# OMG suse you can do better.
chroot ${prefix} /usr/bin/zypper -n --gpg-auto-import-keys refresh --force-download

# reinstall rpm packages via zypper, so the packge list for rpm and zypper are in sync
cd ${prefix}; ls var/cache/zypp/packages/opensuse/suse/${ARCH}/*.rpm > ${prefix}/tmp/rpm.list
cd /
# Note: zypper refuses to install local RPMs and instead re-downloads them,
# with loud messages such as: "'_tmpRPMcache_:bash=0:4.4-17.83' not found in
# package names. Trying capabilities."
#
# I honestly don't know how to fix this, or even if it's possible to fix at
# all.  I have hacked around _so_ many breakages from openSUSE over the years
# that I do not have the stomach to deal with this one too.  The error is
# noisy and slows things down but is ultimately harmless.
# TODO: a ton of missing key errors here
chroot ${prefix} zypper --non-interactive in --no-recommends -f `cat ${prefix}/tmp/rpm.list`

chroot ${prefix} /usr/bin/zypper -n update       2>&1
chroot ${prefix} /usr/bin/zypper clean

#
#  5.  Clean up
#
umount ${prefix}/proc
umount ${prefix}/sys

#
#  6.  Remove the .rpm files from the prefix root.
#

rm -f  ${prefix}/*.rpm ${prefix}/var/cache/zypp/packages/opensuse/suse/${ARCH} ${prefix}/tmp/rpm.list

find ${prefix} -name '*.rpmorig' -delete
find ${prefix} -name '*.rpmnew' -delete
